namespace ScrubJay.Utilities;

public interface IHasher
{
#if NET7_0_OR_GREATER
    /// <summary>
    /// A hashcode that represents an empty collection (not <c>null</c>, but has no items to hash)
    /// </summary>
    static abstract int EmptyHash { get; }

    /// <summary>
    /// A hashcode that represents a <c>null</c> value
    /// </summary>
    static abstract int NullHash { get; }

    static abstract int Hash<T>(T? value);

    static abstract int Hash<T>(T? value, IEqualityComparer<T>? comparer);

    static abstract int HashMany<T1, T2>(T1? value1, T2? value2);

    static abstract int HashMany<T1, T2, T3>(T1? value1, T2? value2, T3? value3);

    static abstract int HashMany<T1, T2, T3, T4>(T1? value1, T2? value2, T3? value3, T4? value4);

    static abstract int HashMany<T1, T2, T3, T4, T5>(T1? value1, T2? value2, T3? value3, T4? value4, T5? value5);

    static abstract int
        HashMany<T1, T2, T3, T4, T5, T6>(T1? value1, T2? value2, T3? value3, T4? value4, T5? value5, T6? value6);

    static abstract int HashMany<T1, T2, T3, T4, T5, T6, T7>(T1? value1, T2? value2, T3? value3, T4? value4, T5? value5,
        T6? value6, T7? value7);

    static abstract int HashMany<T1, T2, T3, T4, T5, T6, T7, T8>(T1? value1, T2? value2, T3? value3, T4? value4, T5? value5,
        T6? value6, T7? value7, T8? value8);


    /// <summary>
    /// Gets a hashcode generated from all the items in a <see cref="ReadOnlySpan{T}"/>
    /// </summary>
    static abstract int HashMany<T>(scoped ReadOnlySpan<T> span);

    /// <summary>
    /// Gets a hashcode generated from all the items in a <see cref="ReadOnlySpan{T}"/> using a <see cref="IEqualityComparer{T}"/>
    /// </summary>
    static abstract int HashMany<T>(scoped ReadOnlySpan<T> span, IEqualityComparer<T>? comparer);


    /// <summary>
    /// Gets a hashcode generated from all the items in a <see cref="Array">T[]</see>
    /// </summary>
    static abstract int HashMany<T>(T[]? array);

    /// <summary>
    /// Gets a hashcode generated by <paramref name="comparer"/> from all the items in the given <paramref name="array"/>
    /// </summary>
    static abstract int HashMany<T>(T[]? array, IEqualityComparer<T>? comparer);


    /// <summary>
    /// Gets a hashcode generated from all the items in the given <paramref name="values"/>
    /// </summary>
    static abstract int HashMany<T>(IEnumerable<T>? values);

    /// <summary>
    /// Gets a hashcode generated by <paramref name="comparer"/> from all the items in the given <paramref name="values"/>
    /// </summary>
    static abstract int HashMany<T>(IEnumerable<T>? values, IEqualityComparer<T>? comparer);
#endif


    /// <summary>
    /// Adds the hashcode for the given <paramref name="value"/> to this <see cref="Hasher"/>
    /// </summary>
    void Add<T>(T? value);

    /// <summary>
    /// Adds the hashcode generated by a <paramref name="comparer"/> for the given <paramref name="value"/> to this <see cref="Hasher"/>
    /// </summary>
    void Add<T>(T? value, IEqualityComparer<T>? comparer);

    /// <summary>
    /// Adds the hashcodes of the items in a <see cref="ReadOnlySpan{T}"/>
    /// </summary>
    void AddMany<T>(scoped ReadOnlySpan<T> span);

    /// <summary>
    /// Adds the hashcodes generated by a <paramref name="comparer"/> for the given <paramref name="span"/> to this <see cref="Hasher"/>
    /// </summary>
    void AddMany<T>(scoped ReadOnlySpan<T> span, IEqualityComparer<T>? comparer);

    /// <summary>
    /// Adds the hashcodes generated for the given <paramref name="array"/> to this <see cref="Hasher"/>
    /// </summary>
    void AddMany<T>(T[]? array);

    /// <summary>
    /// Adds the hashcodes generated by a <paramref name="comparer"/> for the given <paramref name="array"/> to this <see cref="Hasher"/>
    /// </summary>
    void AddMany<T>(T[]? array, IEqualityComparer<T>? comparer);

    /// <summary>
    /// Adds the hashcodes generated for the given <paramref name="values"/> to this <see cref="Hasher"/>
    /// </summary>
    void AddMany<T>(IEnumerable<T>? values);

    /// <summary>
    /// Adds the hashcodes generated by a <paramref name="comparer"/> for the given <paramref name="values"/> to this <see cref="Hasher"/>
    /// </summary>
    void AddMany<T>(IEnumerable<T>? values, IEqualityComparer<T>? comparer);

    /// <summary>
    /// Gets the <see cref="int"/> hashcode generated by this <see cref="IHasher"/> instance
    /// </summary>
    /// <returns></returns>
    int ToHashCode();
}